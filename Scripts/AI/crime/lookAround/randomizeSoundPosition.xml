<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="crime_lookAround_randomizeSoundPosition" is_function="1">
		<Variables>
			<Variable name="distanceXY" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="distanceZ" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="interiorArea" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="maxDistance" type="_float" values="0" isPersistent="0" form="single" />
			<Variable name="myPosition" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="origPosition" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="pathFindingParams" type="pathFindingParams" values="" isPersistent="0" form="single" />
			<Variable name="realDistance" type="_float" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="position" type="vec3" values="" isPersistent="0" form="single" requirementType="Reference" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<GetSpatialInfo In="$this.id" Out="$myPosition" What="Position" />
					<Expression expressions="$distanceZ = $myPosition.z &gt; $position.z ? $myPosition.z - $position.z : $position.z - $myPosition.z" />
					<IsInsideAreaWithLabel Position="$myPosition" Label="&apos;interior&apos;" Area="$interiorArea" FailSubtMissing="false" saveVersion="2">
						<Then canSkip="1">
							<IsInsideAreaWithLabel Position="$position" Label="&apos;interior&apos;" Area="$interiorArea" FailSubtMissing="false" saveVersion="2">
								<Then canSkip="1">
									<Sequence>
										<MeasureDistance position1="$position" position2="$myPosition" mode="TwoDimensions" result="$distanceXY" />
										<Expression expressions="$maxDistance += $distanceXY * $data:script_param[&apos;crime_lookAround_soundPosRandomizer_interiorDistanceMultiplier_XY&apos;].value &#10;$maxDistance += $distanceZ * $data:script_param[&apos;crime_lookAround_soundPosRandomizer_interiorDistanceMultiplier_Z&apos;].value" />
									</Sequence>
								</Then>
								<Else canSkip="1">
									<Expression expressions="$maxDistance += $data:script_param[&apos;crime_lookAround_soundPosRandomizer_interiorToExteriorBonus&apos;].value" />
								</Else>
							</IsInsideAreaWithLabel>
						</Then>
						<Else canSkip="1">
							<IsInsideAreaWithLabel Position="$position" Label="&apos;interior&apos;" Area="$interiorArea" FailSubtMissing="false" saveVersion="2">
								<Then canSkip="1">
									<Expression expressions="$maxDistance += $data:script_param[&apos;crime_lookAround_soundPosRandomizer_interiorToExteriorBonus&apos;].value" />
								</Then>
								<Else canSkip="1">
									<Sequence>
										<MeasureDistance position1="$position" position2="$myPosition" mode="ThreeDimensions" result="$distanceXY" />
										<Expression expressions="$maxDistance += $distanceXY * $data:script_param[&apos;crime_lookAround_soundPosRandomizer_exteriorDistanceMultiplier&apos;].value" />
									</Sequence>
								</Else>
							</IsInsideAreaWithLabel>
						</Else>
					</IsInsideAreaWithLabel>
					<IfCondition failOnCondition="false" condition="$maxDistance &gt; 1">
						<Sequence>
							<Expression expressions="$origPosition = $position &#10;$pathFindingParams.useSmartObjects = false &#10;$pathFindingParams.useGeneratedNSO = false &#10;$pathFindingParams.useDoorPortals = false" />
							<Selector>
								<LoopUntil until="Success" attemptCount="3">
									<Sequence>
										<GetRandomPos StartPos="$origPosition" PosExtentHor="1.000000" PosExtentVert="2.000000" MaxRange="$maxDistance" Precise="false" MaxIterantions="1" Target="$position" navAgentType="Automatic" pathFindingParams="" />
										<MeasureDistance position1="$origPosition" position2="$position" mode="TwoDimensions" result="$realDistance" />
										<IfCondition failOnCondition="false" condition="$realDistance &gt; 1.5 * $maxDistance | &#10;$realDistance &lt; 0.5 * $maxDistance">
											<Fail />
										</IfCondition>
									</Sequence>
								</LoopUntil>
								<Expression expressions="$position = $origPosition" />
							</Selector>
						</Sequence>
					</IfCondition>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="distanceXY" comment="" />
				<Variable name="distanceZ" comment="" />
				<Variable name="interiorArea" comment="" />
				<Variable name="maxDistance" comment="" />
				<Variable name="myPosition" comment="" />
				<Variable name="origPosition" comment="" />
				<Variable name="pathFindingParams" comment="" />
				<Variable name="realDistance" comment="" />
				<Variable name="position" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</GetSpatialInfo>
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
						<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</MeasureDistance>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Sequence>
									</Then>
									<Else>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Else>
								</IsInsideAreaWithLabel>
							</Then>
							<Else>
								<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Then>
									<Else>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</MeasureDistance>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Sequence>
									</Else>
								</IsInsideAreaWithLabel>
							</Else>
						</IsInsideAreaWithLabel>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
								<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<GetRandomPos hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</GetRandomPos>
											<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</MeasureDistance>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Fail>
											</IfCondition>
										</Sequence>
									</LoopUntil>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Selector>
							</Sequence>
						</IfCondition>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>