<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="crime_weaponDecorator" is_function="1">
		<Variables>
			<Variable name="leftHand" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="leftHand_content" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="leftHand_enabled" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="leftHand_secondary" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="rightHand" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="rightHand_content" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="rightHand_enabled" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="rightHand_secondary" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="shouldHaveDrawnWeapon_local" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="shouldHaveDrawnWeapon" type="_bool" values="" isPersistent="0" form="single" requirementType="Reference" />
			<Variable name="suppressWaitAction" type="_bool" values="false" isPersistent="0" form="single" requirementType="In" />
			<Variable name="waitActionFinished" type="_bool" values="" isPersistent="0" form="single" requirementType="Reference" optional="1" />
			<Variable name="weaponSet" type="_string" values="Primary" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Loop count="-1">
					<Sequence>
						<ReinitVariable variable="$waitActionFinished" />
						<IfElseCondition failOnCondition="false" condition="$shouldHaveDrawnWeapon" saveVersion="2">
							<Then canSkip="1">
								<Sequence>
									<IsWeaponDrawn who="$this.id" WeaponSet="Oversized" saveVersion="2">
										<Then canSkip="1">
											<Success />
										</Then>
										<Else canSkip="1">
											<Sequence>
												<GetWeaponsFromWeaponSet WeaponSet="$weaponSet" LeftHand="$leftHand" RightHand="$rightHand" UseTorchWhenAppropriate="true" />
												<Sequence>
													<GetWeaponsFromWeaponSet WeaponSet="Secondary" LeftHand="$leftHand_secondary" RightHand="$rightHand_secondary" UseTorchWhenAppropriate="true" />
													<IfCondition failOnCondition="false" condition="$rightHand_secondary ~= $__null | &#10;$leftHand_secondary ~= $__null">
														<Sequence>
															<HandCheck who="$this.id" LeftHand="$leftHand_content" RightHand="$rightHand_content" />
															<IfCondition failOnCondition="false" condition="$leftHand_secondary == $leftHand_content &amp; &#10;$rightHand_secondary == $rightHand_content">
																<Expression expressions="$rightHand = $rightHand_secondary &#10;$leftHand = $leftHand_secondary" />
															</IfCondition>
														</Sequence>
													</IfCondition>
												</Sequence>
											</Sequence>
										</Else>
									</IsWeaponDrawn>
									<Expression expressions="$rightHand_enabled = $rightHand ~= $__null &#10;$leftHand_enabled = $leftHand ~= $__null" />
									<HandContentElement hand="Right" item="$rightHand" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="crime_weapon_rightHand" useDecision="true" enabled="$rightHand_enabled" saveVersion="2">
										<Search canSkip="1">
											<Success />
										</Search>
										<Exec canSkip="1">
											<HandContentElement hand="Left" item="$leftHand" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="crime_weapon_leftHand" useDecision="true" enabled="$leftHand_enabled" saveVersion="2">
												<Search canSkip="1">
													<Success />
												</Search>
												<Exec canSkip="1">
													<Sequence>
														<IfCondition failOnCondition="false" condition="~$suppressWaitAction">
															<IsFastForwarded failOnCondition="false" saveVersion="2">
																<Else canSkip="1">
																	<SuppressFailure>
																		<InstantSemaphore SemaphoreCount="1" LockManagerType="Intellect" SemaphoreName="&apos;SAL_action_running&apos;">
																			<WaitAction />
																		</InstantSemaphore>
																	</SuppressFailure>
																</Else>
															</IsFastForwarded>
														</IfCondition>
														<Expression expressions="$shouldHaveDrawnWeapon_local = $shouldHaveDrawnWeapon &#10;$waitActionFinished = true" />
														<IfGate atomic="false" condition="$shouldHaveDrawnWeapon ~= $shouldHaveDrawnWeapon_local" RunLogic="Halt">
															<Success />
														</IfGate>
													</Sequence>
												</Exec>
											</HandContentElement>
										</Exec>
									</HandContentElement>
								</Sequence>
							</Then>
							<Else canSkip="1">
								<Sequence>
									<IfCondition failOnCondition="false" condition="~$suppressWaitAction">
										<IsFastForwarded failOnCondition="false" saveVersion="2">
											<Else canSkip="1">
												<SuppressFailure>
													<InstantSemaphore SemaphoreCount="1" LockManagerType="Intellect" SemaphoreName="&apos;SAL_action_running&apos;">
														<WaitAction />
													</InstantSemaphore>
												</SuppressFailure>
											</Else>
										</IsFastForwarded>
									</IfCondition>
									<Expression expressions="$shouldHaveDrawnWeapon_local = $shouldHaveDrawnWeapon &#10;$waitActionFinished = true" />
									<IfGate atomic="false" condition="$shouldHaveDrawnWeapon ~= $shouldHaveDrawnWeapon_local" RunLogic="Halt">
										<Success />
									</IfGate>
								</Sequence>
							</Else>
						</IfElseCondition>
					</Sequence>
				</Loop>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="leftHand" comment="" />
				<Variable name="leftHand_content" comment="" />
				<Variable name="leftHand_enabled" comment="" />
				<Variable name="leftHand_secondary" comment="" />
				<Variable name="rightHand" comment="" />
				<Variable name="rightHand_content" comment="" />
				<Variable name="rightHand_enabled" comment="" />
				<Variable name="rightHand_secondary" comment="" />
				<Variable name="shouldHaveDrawnWeapon_local" comment="" />
				<Variable name="shouldHaveDrawnWeapon" comment="" />
				<Variable name="suppressWaitAction" comment="" />
				<Variable name="waitActionFinished" comment="" />
				<Variable name="weaponSet" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</ReinitVariable>
							<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IsWeaponDrawn hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</Then>
											<Else>
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</GetWeaponsFromWeaponSet>
													<Sequence hasInputBreakpoint="0" comment="#KCD2-328373" breakpointFlags="0">
														<OutputBreakpoints />
														<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</GetWeaponsFromWeaponSet>
														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<HandCheck hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</HandCheck>
																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</IfCondition>
															</Sequence>
														</IfCondition>
													</Sequence>
												</Sequence>
											</Else>
										</IsWeaponDrawn>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
										<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Search>
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</Search>
											<Exec>
												<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Search>
														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Success>
													</Search>
													<Exec>
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<IsFastForwarded hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Else>
																		<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<InstantSemaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</WaitAction>
																			</InstantSemaphore>
																		</SuppressFailure>
																	</Else>
																</IsFastForwarded>
															</IfCondition>
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
															<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Success>
															</IfGate>
														</Sequence>
													</Exec>
												</HandContentElement>
											</Exec>
										</HandContentElement>
									</Sequence>
								</Then>
								<Else>
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<IsFastForwarded hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Else>
													<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<InstantSemaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</WaitAction>
														</InstantSemaphore>
													</SuppressFailure>
												</Else>
											</IsFastForwarded>
										</IfCondition>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
										<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</IfGate>
									</Sequence>
								</Else>
							</IfElseCondition>
						</Sequence>
					</Loop>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>