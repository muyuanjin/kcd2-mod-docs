<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="player_sleepWalkingTeleport" is_function="1">
		<Variables>
			<Variable name="hangoverHub" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="hangoverPlaces" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="isLucky" type="_bool" values="false" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="player_sleepWalking" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<SuppressFailure>
					<GameContextCheck context="disableHangoverTeleport" saveVersion="2">
						<Else canSkip="1">
							<Sequence>
								<IfCondition failOnCondition="true" condition="$__land ~= $__null">
									<GraphSearch Origin="$__land" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
										<LinkTagFilter tag="&apos;hangoverSpotsHub&apos;" prune="true" negprune="unknown" Parent="" Child="$hangoverHub" Data="" />
									</GraphSearch>
								</IfCondition>
								<IfCondition failOnCondition="false" condition="$player_sleepWalking == true">
									<LuaGate code="return Calendar.IsWorldTimePaused()" saveVersion="2">
										<Then canSkip="1">
											<Success />
										</Then>
										<Else canSkip="1">
											<Sequence>
												<ReinitVariable variable="$isLucky" />
												<ReinitVariable variable="$hangoverPlaces" />
												<RandomGate opensWithChance="0.350000" saveVersion="2">
													<Then canSkip="1">
														<Sequence>
															<GraphSearch Origin="$hangoverHub" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																<LinkTagFilter tag="&apos;hangoverSpot_joke&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																<Nodalyzer Quantifiers="ForAll" Parent="" Child="$hangoverPlaces" saveVersion="2" />
															</GraphSearch>
															<Expression expressions="$isLucky = true" />
														</Sequence>
													</Then>
													<Else canSkip="1">
														<RandomGate opensWithChance="0.500000" saveVersion="2">
															<Then canSkip="1">
																<GraphSearch Origin="$hangoverHub" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																	<LinkTagFilter tag="&apos;hangoverSpot&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																	<NegationOp Results="true" Advance="true" EndOp="true" saveVersion="2">
																		<Child0 canSkip="1">
																			<LinkTagFilter tag="&apos;ignoredHangoverSpot&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																		</Child0>
																	</NegationOp>
																	<Nodalyzer Quantifiers="ForAll" Parent="" Child="$hangoverPlaces" saveVersion="2">
																		<Child0 canSkip="1">
																			<RangeSorter point="" SortOrder="Ascending" Source="Child" />
																		</Child0>
																	</Nodalyzer>
																</GraphSearch>
															</Then>
															<Else canSkip="1">
																<Sequence>
																	<GraphSearch Origin="$hangoverHub" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																		<LinkTagFilter tag="&apos;hangoverSpot&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																		<NegationOp Results="true" Advance="true" EndOp="true" saveVersion="2">
																			<Child0 canSkip="1">
																				<LinkTagFilter tag="&apos;ignoredHangoverSpot&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																			</Child0>
																		</NegationOp>
																		<Nodalyzer Quantifiers="ForAll" Parent="" Child="$hangoverPlaces" saveVersion="2" />
																	</GraphSearch>
																	<RandomItem Array="$hangoverPlaces" Result="$hangoverPlaces[0]" Clamp="-1" />
																</Sequence>
															</Else>
														</RandomGate>
													</Else>
												</RandomGate>
												<IfElseCondition failOnCondition="false" condition="#hangoverPlaces &gt; 0" saveVersion="2">
													<Then canSkip="1">
														<ExecuteLua code="player.player:SetAlcoTeleportTarget(data.hangoverPlaces[0])" />
													</Then>
													<Else canSkip="1">
														<ErrorNode Message="&apos;Nemam zadne misto na teleportovani pri bolehlavu? Ja chci na hnuj! - Jindra&apos;" />
													</Else>
												</IfElseCondition>
											</Sequence>
										</Else>
									</LuaGate>
								</IfCondition>
							</Sequence>
						</Else>
					</GameContextCheck>
				</SuppressFailure>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="hangoverHub" comment="" />
				<Variable name="hangoverPlaces" comment="" />
				<Variable name="isLucky" comment="" />
				<Variable name="player_sleepWalking" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GameContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Else>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</LinkTagFilter>
										</GraphSearch>
									</IfCondition>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<LuaGate hasInputBreakpoint="0" comment="do nothing if time paused" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</Then>
											<Else>
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</ReinitVariable>
													<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</ReinitVariable>
													<RandomGate hasInputBreakpoint="0" comment="x% chance for interesting (joke) point" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<Sequence hasInputBreakpoint="0" comment="joke spots" breakpointFlags="0">
																<OutputBreakpoints />
																<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</LinkTagFilter>
																	<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																		<OutputBreakpoints />
																	</Nodalyzer>
																</GraphSearch>
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
															</Sequence>
														</Then>
														<Else>
															<RandomGate hasInputBreakpoint="0" comment="50% chance for closest normal point" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<GraphSearch hasInputBreakpoint="0" comment="closest normal spot" breakpointFlags="0">
																		<OutputBreakpoints />
																		<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</LinkTagFilter>
																		<NegationOp hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Child0>
																				<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</LinkTagFilter>
																			</Child0>
																		</NegationOp>
																		<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Child0>
																				<RangeSorter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</RangeSorter>
																			</Child0>
																		</Nodalyzer>
																	</GraphSearch>
																</Then>
																<Else>
																	<Sequence hasInputBreakpoint="0" comment="random normal spot" breakpointFlags="0">
																		<OutputBreakpoints />
																		<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</LinkTagFilter>
																			<NegationOp hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																				<Child0>
																					<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</LinkTagFilter>
																				</Child0>
																			</NegationOp>
																			<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																			</Nodalyzer>
																		</GraphSearch>
																		<RandomItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</RandomItem>
																	</Sequence>
																</Else>
															</RandomGate>
														</Else>
													</RandomGate>
													<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</ExecuteLua>
														</Then>
														<Else>
															<ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</ErrorNode>
														</Else>
													</IfElseCondition>
												</Sequence>
											</Else>
										</LuaGate>
									</IfCondition>
								</Sequence>
							</Else>
						</GameContextCheck>
					</SuppressFailure>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>