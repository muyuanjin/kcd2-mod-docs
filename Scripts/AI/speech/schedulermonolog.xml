<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="speech_schedulerMonolog" is_function="1">
		<Variables>
			<Variable name="animationState" type="enum:animationOverride" values="" isPersistent="0" form="single" />
			<Variable name="participants" type="_wuid" values="" isPersistent="0" form="array" />
		</Variables>
		<Parameters>
			<Variable name="alias" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="animationApproach" type="enum:animationApproach" values="$enum:animationApproach.dontPlayDialogAnimations" isPersistent="0" form="single" requirementType="In" />
			<Variable name="context" type="_float" values="" isPersistent="0" form="associative" requirementType="In" optional="1" />
			<Variable name="lookAtId" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" optional="1" />
			<Variable name="metarole" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="skipInLod" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="subtitlesDown" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<IfElseCondition failOnCondition="false" condition="$alias ~= &apos;&apos; | $metarole ~= &apos;&apos;" saveVersion="2">
					<Then canSkip="1">
						<Sequence>
							<PushToArray array="$participants" value="$this.id" direction="Back" />
							<Function_speech_getAnimationSetting animationApproach="$animationApproach" participants="$participants" animationState="$animationState" nodeLabel="83312068" />
							<Parallel successMode="Any" failureMode="Any">
								<IfElseCondition failOnCondition="false" condition="$metarole ~= &apos;&apos;" saveVersion="2">
									<Then canSkip="1">
										<LogToLabel Name="&apos;Metarole&apos;" Wuid="" Message="&apos;$metarole;&apos;">
											<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
										</LogToLabel>
									</Then>
									<Else canSkip="1">
										<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
									</Else>
								</IfElseCondition>
								<IfElseCondition failOnCondition="false" condition="$lookAtId ~= $__null" saveVersion="2">
									<Then canSkip="1">
										<ForceLook LookTarget="$lookAtId" DisableVariations="true">
											<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
										</ForceLook>
									</Then>
									<Else canSkip="1">
										<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
									</Else>
								</IfElseCondition>
								<IfElseCondition failOnCondition="false" condition="$animationApproach == $enum:animationApproach.ingameDialogPoseAndAnimations | &#10;$animationApproach == $enum:animationApproach.tryDialogAnimations" saveVersion="2">
									<Then canSkip="1">
										<IsNightTimeOfDay saveVersion="2">
											<Then canSkip="1">
												<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
											</Then>
											<Else canSkip="1">
												<EntityContext context="ForceForbidAutoTorch" target="">
													<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
												</EntityContext>
											</Else>
										</IsNightTimeOfDay>
									</Then>
									<Else canSkip="1">
										<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
									</Else>
								</IfElseCondition>
								<DoMonologue DecisionId="" DecisionAlias="$alias" Metaroles="$metarole" SoulId="$this.id" ForceSubtitles="$subtitlesDown" AllowMutedSouls="false" SkipInLOD="$skipInLod" AnimationOverride="$animationState" ContextVariables="$context" />
							</Parallel>
						</Sequence>
					</Then>
					<Else canSkip="1">
						<ErrorNode Message="&apos;No alias or metarole provided. Dialog has to be specified by one of them.&apos;" />
					</Else>
				</IfElseCondition>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="animationState" comment="" />
				<Variable name="participants" comment="" />
				<Variable name="alias" comment="" />
				<Variable name="animationApproach" comment="" />
				<Variable name="context" comment="" />
				<Variable name="lookAtId" comment="" />
				<Variable name="metarole" comment="" />
				<Variable name="skipInLod" comment="" />
				<Variable name="subtitlesDown" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosY="20" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Then>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</PushToArray>
								<Function_speech_getAnimationSetting hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_speech_getAnimationSetting>
								<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<IfElseCondition hasInputBreakpoint="0" comment="Used for debugging during crime testing" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Wait>
											</LogToLabel>
										</Then>
										<Else>
											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Wait>
										</Else>
									</IfElseCondition>
									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Wait>
											</ForceLook>
										</Then>
										<Else>
											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Wait>
										</Else>
									</IfElseCondition>
									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<IsNightTimeOfDay hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Wait>
												</Then>
												<Else>
													<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Wait>
													</EntityContext>
												</Else>
											</IsNightTimeOfDay>
										</Then>
										<Else>
											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Wait>
										</Else>
									</IfElseCondition>
									<DoMonologue hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</DoMonologue>
								</Parallel>
							</Sequence>
						</Then>
						<Else>
							<ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</ErrorNode>
						</Else>
					</IfElseCondition>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>