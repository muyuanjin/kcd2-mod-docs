<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="switch_handleAwareness_sleep" is_function="1">
		<Variables>
			<Variable name="bed" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="bedBelongsToHome" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="home" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="isRelevantBed" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="owner" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="reactionSuppressed" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="stimulusEscalatedTrespass" type="switch:stimulus:escalatedTrespass" values="" isPersistent="0" form="single" />
			<Variable name="trespassArea" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="trespassSevereness" type="enum:trespassLevel" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<GameContextCheck context="crime_disabledTrespassReactions" saveVersion="2">
					<Else canSkip="1">
						<EntityContextCheck context="crime_disabledDirectPlayerTrespassReactions" target="" saveVersion="2">
							<Else canSkip="1">
								<EntityContextCheck context="crime_bff" target="" saveVersion="2">
									<Else canSkip="1">
										<Sequence>
											<GraphSearch Origin="$__player" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
												<LinkTagFilter tag="&apos;player_onBed&apos;" prune="true" negprune="unknown" Parent="" Child="$bed" Data="" />
											</GraphSearch>
											<IfCondition failOnCondition="false" condition="$bed ~= $__null">
												<Sequence>
													<GetOwner Object="$bed" Owner="$owner" />
													<Switch>
														<IfCondition failOnCondition="false" condition="$owner == $__null | &#10;$owner == $__player">
															<Success />
														</IfCondition>
														<IfElseCondition failOnCondition="false" condition="$owner == $this.id" saveVersion="2">
															<Then canSkip="1">
																<Expression expressions="$isRelevantBed = true" />
															</Then>
														</IfElseCondition>
														<DefaultBranch>
															<GetAreMates Npc1="$this.id" Npc2="$owner" AreMates="$isRelevantBed" />
														</DefaultBranch>
													</Switch>
													<IfCondition failOnCondition="false" condition="$isRelevantBed">
														<Sequence>
															<DetermineTrespassReaction Observer="$this.id" Target="$__player" Position="" ForceSemipublicReaction="false" ShouldUseVec3Position="false" TrespassAreaSevereness="$trespassSevereness" TrespassArea="$trespassArea" Reaction="$isRelevantBed" ReactionSuppressed="$reactionSuppressed" />
															<Switch>
																<IfCondition failOnCondition="false" condition="$isRelevantBed &amp; $trespassSevereness &gt;= $enum:trespassLevel.personal">
																	<Sequence>
																		<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																			<LinkTagFilter tag="&apos;home&apos;" prune="true" negprune="unknown" Parent="" Child="$home" Data="" />
																		</GraphSearch>
																		<Function_crime_equipmentBelongsToHome equipment="$bed" home="$home" equipmentBelongsToHome="$bedBelongsToHome" nodeLabel="28189934" />
																		<Expression expressions="$stimulusEscalatedTrespass.stimulusKind =  $enum:crime_stimulusKind.escalatedTrespass" />
																		<IfElseCondition failOnCondition="false" condition="$bedBelongsToHome" saveVersion="2">
																			<Then canSkip="1">
																				<Expression expressions="$stimulusEscalatedTrespass.wuidType = $enum:crime_trespassInformationWuid.home &#10;$stimulusEscalatedTrespass.home = $home" />
																			</Then>
																			<Else canSkip="1">
																				<Expression expressions="$stimulusEscalatedTrespass.wuidType = $enum:crime_trespassInformationWuid.none" />
																			</Else>
																		</IfElseCondition>
																		<Function_switch_handleStimulusEscalatedTrespass stimulus="$stimulusEscalatedTrespass" nodeLabel="85480814" />
																	</Sequence>
																</IfCondition>
																<IfCondition failOnCondition="false" condition="$isRelevantBed &amp; $trespassSevereness &gt;= $enum:trespassLevel.semipersonal">
																	<Success />
																</IfCondition>
																<DefaultBranch>
																	<Function_callInterrupt_mindPlayer ignorePriority="false" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_reactionKind.unknown" soundType="$enum:sound.invalid" stimulusKind="$enum:crime_stimulusKind.trespass" nodeLabel="36517721" />
																</DefaultBranch>
															</Switch>
														</Sequence>
													</IfCondition>
												</Sequence>
											</IfCondition>
										</Sequence>
									</Else>
								</EntityContextCheck>
							</Else>
						</EntityContextCheck>
					</Else>
				</GameContextCheck>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="bed" comment="" />
				<Variable name="bedBelongsToHome" comment="" />
				<Variable name="home" comment="" />
				<Variable name="isRelevantBed" comment="" />
				<Variable name="owner" comment="" />
				<Variable name="reactionSuppressed" comment="" />
				<Variable name="stimulusEscalatedTrespass" comment="" />
				<Variable name="trespassArea" comment="" />
				<Variable name="trespassSevereness" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<GameContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Else>
							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Else>
									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Else>
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</LinkTagFilter>
												</GraphSearch>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<GetOwner hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</GetOwner>
														<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Success>
															</IfCondition>
															<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</Then>
															</IfElseCondition>
															<DefaultBranch>
																<GetAreMates hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</GetAreMates>
															</DefaultBranch>
														</Switch>
														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<DetermineTrespassReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</DetermineTrespassReaction>
																<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</LinkTagFilter>
																			</GraphSearch>
																			<Function_crime_equipmentBelongsToHome hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Function_crime_equipmentBelongsToHome>
																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																			<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																				<Then>
																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Expression>
																				</Then>
																				<Else>
																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Expression>
																				</Else>
																			</IfElseCondition>
																			<Function_switch_handleStimulusEscalatedTrespass hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Function_switch_handleStimulusEscalatedTrespass>
																		</Sequence>
																	</IfCondition>
																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Success>
																	</IfCondition>
																	<DefaultBranch>
																		<Function_callInterrupt_mindPlayer hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Function_callInterrupt_mindPlayer>
																	</DefaultBranch>
																</Switch>
															</Sequence>
														</IfCondition>
													</Sequence>
												</IfCondition>
											</Sequence>
										</Else>
									</EntityContextCheck>
								</Else>
							</EntityContextCheck>
						</Else>
					</GameContextCheck>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>